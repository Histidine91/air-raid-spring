piece base, body, gp, mrm1, mrm2, mrm3, mrm4, aam1, aam2;
piece a1, a2, m1, m2, m3, m4, engine, trail1, trail2;

static-var mrm, aam, unlock;

#include "constants.h"

#define SIG_Gun 1
#define SIG_Unlock 2

lua_UseGun() {	return 0;}
lua_UseAmmo(ammotype) {	return 0;}
lua_HasAmmo(ammotype) {	return 0;}
lua_AddTrail() {return 0; }

lua_MissileLaunch() {
	return 1;
}

Create() {
	turn trail1 to y-axis <90> now;
	turn trail2 to y-axis <90> now;
	call-script lua_AddTrail(trail1,10,50,1);
	call-script lua_AddTrail(trail2,10,50,1);
}

QueryWeapon1(p) {
	p=gp;
}

QueryWeapon2(p) {
	p = m1 + mrm;
}

AimWeapon2() {
	return 1;
}

QueryWeapon3(p) {
	p = a1 + aam;
}

AimWeapon3() {
	return 1;
}

Shot2() {
	mrm= (mrm +1) & 3;
	call-script lua_MissileLaunch(get TARGET_ID(2), 2);
	unlock=0;
	call-script lua_UseAmmo(1);
}

Shot3() {
	aam= !aam;
	call-script lua_MissileLaunch(get TARGET_ID(3), 3);
	unlock=0;
	call-script lua_UseAmmo(2);
}

BlockShot2(target,block) {
	call-script lua_HasAmmo(1);
	block = (unlock != 1) || (!get LUA1);
}

BlockShot3(target,block) {
	call-script lua_HasAmmo(2);
	block = (unlock != 2) || (!get LUA1);
}

StartGun() {
	signal SIG_Gun;
	set-signal-mask SIG_Gun;
	while(1) {
		call-script lua_UseGun(2);
		if (!get LUA1){ //out of ammo
			return 0;
		}
		emit-sfx 2048 from gp;
		emit-sfx 2048 from gp;
		sleep 30;
	}
}

StopGun() {
	signal SIG_Gun;
}

UnlockWeapon(num) {
	signal SIG_Unlock;
	set-signal-mask SIG_Unlock;
	if (num==1) {
		unlock = 1;
	}
	else if (num==2) {
		unlock = 2;
	}
	sleep 500;
	unlock = 0;
}

Killed() {
	signal SIG_Gun;
	unlock=0;
	emit-sfx 1024 from base;
}